# Inspiration from:
# - https://cristianadam.eu/20191222/using-github-actions-with-c-plus-plus-and-cmake/
# - https://github.com/cristianadam/HelloWorld/blob/master/.github/workflows/build_cmake.yml
# - https://github.com/marketplace/actions/vcpkg-action

name: CMake Build Matrix

on:
  workflow_dispatch: {} # allow running it manually
  push:
    branches:
      - main
    tags:
      - v**
  pull_request:
    branches:
      - main
    tags:
      - v**

env:
  CMAKE_VERSION: 3.26.3
  NINJA_VERSION: 1.11.1
  BUILD_TYPE: Release
  CCACHE_VERSION: 4.7.3

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC", artifact: "windows-msvc.7z",
            os: windows-latest,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            vcpkg_triplet: x64-windows-static
          }
        - {
            name: "Windows Latest MinGW", artifact: "windows-mingw.7z",
            os: windows-latest,
            cc: "gcc", cxx: "g++",
            vcpkg_triplet: x64-windows-static
          }
        - {
            name: "Ubuntu Latest GCC", artifact: "linux.7z",
            os: ubuntu-latest,
            cc: "gcc", cxx: "g++",
            vcpkg_triplet: x64-linux-release
          }
        - {
            name: "macOS Latest Clang", artifact: "macos.7z",
            os: macos-latest,
            cc: "clang", cxx: "clang++",
            vcpkg_triplet: x64-osx-release
          }

    steps:
    - uses: actions/checkout@v3

    - name: Download Ninja and CMake
      shell: cmake -P {0}
      run: |
        set(cmake_version $ENV{CMAKE_VERSION})
        set(ninja_version $ENV{NINJA_VERSION})

        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

        if ("${{ runner.os }}" STREQUAL "Windows")
          set(ninja_suffix "win.zip")
          set(cmake_suffix "windows-x86_64.zip")
          set(cmake_dir "cmake-${cmake_version}-windows-x86_64/bin")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(ninja_suffix "linux.zip")
          set(cmake_suffix "linux-x86_64.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-linux-x86_64/bin")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(ninja_suffix "mac.zip")
          set(cmake_suffix "macos-universal.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-macos-universal/CMake.app/Contents/bin")
        endif()

        set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
        file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)

        set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
        file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)

        # Add to PATH environment variable
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        file(APPEND "$ENV{GITHUB_PATH}" "$ENV{GITHUB_WORKSPACE}${path_separator}${cmake_dir}")

        if (NOT "${{ runner.os }}" STREQUAL "Windows")
          execute_process(
            COMMAND chmod +x ninja
            COMMAND chmod +x ${cmake_dir}/cmake
          )
        endif()

    - name: vcpkg build
      if: runner.os != 'Linux'
      uses: johnwason/vcpkg-action@v4
      with:
        pkgs: wxwidgets
        triplet: ${{ matrix.config.vcpkg_triplet }}
        cache-key: ${{ matrix.config.os }}
        revision: master
        token: ${{ github.token }}

    - name: Install wxWidgets
      if: runner.os == 'Linux'
      shell: cmake -P {0}
      run: |
        execute_process(COMMAND sudo apt-get -y install libwxgtk3.0-gtk3-dev)

    - name: Download ccache
      id: ccache
      shell: cmake -P {0}
      run: |
        set(ccache_url "https://github.com/cristianadam/ccache/releases/download/v$ENV{CCACHE_VERSION}/${{ runner.os }}.tar.xz")
        file(DOWNLOAD "${ccache_url}" ./ccache.tar.xz SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ccache.tar.xz)

    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        file(APPEND "$ENV{GITHUB_OUTPUT}" "timestamp=${current_date}")

    - name: ccache cache files
      uses: actions/cache@v3.2.1
      with:
        path: .ccache
        key: ${{ matrix.config.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
          ${{ matrix.config.name }}-ccache-

    - name: Configure
      shell: cmake -P {0}
      run: |
        set(ENV{CC} ${{ matrix.config.cc }})
        set(ENV{CXX} ${{ matrix.config.cxx }})

        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          execute_process(
            COMMAND "${{ matrix.config.environment_script }}" && set
            OUTPUT_FILE environment_script_output.txt
          )
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()

        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")

        if (NOT "${{ runner.os }}" STREQUAL "Linux")
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/vcpkg/scripts/buildsystems/vcpkg.cmake" toolchain_file)
          execute_process(
            COMMAND cmake
              -S .
              -B build
              -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
              -D CMAKE_C_COMPILER_LAUNCHER=ccache
              -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
              -D CMAKE_TOOLCHAIN_FILE=${toolchain_file} -DVCPKG_TARGET_TRIPLET=${{ matrix.config.vcpkg_triplet }}
            RESULT_VARIABLE result
          )
        else()
          execute_process(
            COMMAND cmake
              -S .
              -B build
              -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
              -G Ninja
              -D CMAKE_MAKE_PROGRAM=ninja
              -D CMAKE_C_COMPILER_LAUNCHER=ccache
              -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
            RESULT_VARIABLE result
          )
        endif()

        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Build
      shell: cmake -P {0}
      run: |
        set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")

        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()

        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}" ccache_basedir)
        set(ENV{CCACHE_BASEDIR} "${ccache_basedir}")
        set(ENV{CCACHE_DIR} "${ccache_basedir}/.ccache")
        set(ENV{CCACHE_COMPRESS} "true")
        set(ENV{CCACHE_COMPRESSLEVEL} "6")
        set(ENV{CCACHE_MAXSIZE} "400M")
        if ("${{ matrix.config.cxx }}" STREQUAL "cl")
          set(ENV{CCACHE_MAXSIZE} "600M")
        endif()

        execute_process(COMMAND ccache -p)
        execute_process(COMMAND ccache -z)

        execute_process(
          COMMAND cmake --build build --config $ENV{BUILD_TYPE}
          RESULT_VARIABLE result
          OUTPUT_VARIABLE output
          ERROR_VARIABLE output
          ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
        )
        if (NOT result EQUAL 0)
          string(REGEX MATCH "FAILED:.*$" error_message "${output}")
          string(REPLACE "\n" "%0A" error_message "${error_message}")
          message("::error::${error_message}")
          message(FATAL_ERROR "Build failed")
        endif()

    - name: ccache statistics
      shell: cmake -P {0}
      run: |
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}" ccache_basedir)
        set(ENV{CCACHE_BASEDIR} "${ccache_basedir}")
        set(ENV{CCACHE_DIR} "${ccache_basedir}/.ccache")

        execute_process(COMMAND ccache -s)

    - name: Run tests
      shell: cmake -P {0}
      run: |
        include(ProcessorCount)
        ProcessorCount(N)

        set(ENV{CTEST_OUTPUT_ON_FAILURE} "ON")

        execute_process(
          COMMAND ctest -j ${N} -C $ENV{BUILD_TYPE}
          WORKING_DIRECTORY build
          RESULT_VARIABLE result
          OUTPUT_VARIABLE output
          ERROR_VARIABLE output
          ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
        )
        if (NOT result EQUAL 0)
          string(REGEX MATCH "[0-9]+% tests.*[0-9.]+ sec.*$" test_results "${output}")
          string(REPLACE "\n" "%0A" test_results "${test_results}")
          message("::error::${test_results}")
          message(FATAL_ERROR "Running tests failed!")
        endif()

    - name: Install Strip
      run: cmake --install build --prefix instdir --strip

    - name: Generate artifact name
      id: generate-name
      shell: cmake -P {0}
      run: |
        execute_process(
          COMMAND cmake --system-information
          WORKING_DIRECTORY build
          OUTPUT_VARIABLE sysInfo
        )
        
        string(REGEX MATCH "CMAKE_PROJECT_NAME:STATIC=([^\n]*)" projectName ${sysInfo})
        set(projectName ${CMAKE_MATCH_1})
        
        string(REGEX MATCH "CMAKE_PROJECT_VERSION:STATIC=([^\n]*)" projectVersion ${sysInfo})
        set(projectVersion ${CMAKE_MATCH_1})
        
        # Save artifact name to GitHub environment variable
        set(artifactName "${projectName}_${projectVersion}_${{ matrix.config.artifact }}")
        file(APPEND "$ENV{GITHUB_OUTPUT}" "artifactName=${artifactName}")
        
        # Save project name and version to a file for using with other jobs
        # https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
        file(WRITE "projectName.txt" ${projectName})
        file(WRITE "projectVersion.txt" ${projectVersion})
    
    - name: Pack
      working-directory: instdir
      run: cmake -E tar cfv ../${{ steps.generate-name.outputs.artifactName }} --format=7zip .

    - name: Upload project name
      uses: actions/upload-artifact@v3
      with:
        name: projectName
        path: ./projectName.txt

    - name: Upload project version
      uses: actions/upload-artifact@v3
      with:
        name: projectVersion
        path: ./projectVersion.txt

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.generate-name.outputs.artifactName }}
        path: ./${{ steps.generate-name.outputs.artifactName }}

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./

    - name: Get project name and version
      id: get_name_version
      shell: bash
      run: |
        projectName=`cat projectName/projectName.txt`
        projectVersion=`cat projectVersion/projectVersion.txt`
        echo "projectName=$projectName" >> "$GITHUB_OUTPUT"
        echo "projectVersion=$projectVersion" >> "$GITHUB_OUTPUT"

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v0.1.15
      with:
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        files: |
          ${{ steps.get_name_version.outputs.projectName }}_${{ steps.get_name_version.outputs.projectVersion }}_windows-msvc.7z/${{ steps.get_name_version.outputs.projectName }}_${{ steps.get_name_version.outputs.projectVersion }}_windows-msvc.7z
          ${{ steps.get_name_version.outputs.projectName }}_${{ steps.get_name_version.outputs.projectVersion }}_windows-mingw.7z/${{ steps.get_name_version.outputs.projectName }}_${{ steps.get_name_version.outputs.projectVersion }}_windows-mingw.7z
          ${{ steps.get_name_version.outputs.projectName }}_${{ steps.get_name_version.outputs.projectVersion }}_linux.7z/${{ steps.get_name_version.outputs.projectName }}_${{ steps.get_name_version.outputs.projectVersion }}_linux.7z
          ${{ steps.get_name_version.outputs.projectName }}_${{ steps.get_name_version.outputs.projectVersion }}_macos.7z/${{ steps.get_name_version.outputs.projectName }}_${{ steps.get_name_version.outputs.projectVersion }}_macos.7z
        body: |
          ## Downloads:
          | Name                    | File | OS |
          |-------------------------|------|----|
          | Windows MSVC (archive)  | ${{ steps.get_name_version.outputs.projectName }}_${{ steps.get_name_version.outputs.projectVersion }}_windows-msvc.7z |    |
          | Windows MinGW (archive) | ${{ steps.get_name_version.outputs.projectName }}_${{ steps.get_name_version.outputs.projectVersion }}_windows-mingw.7z |    |
          | Ubuntu (archive)        | ${{ steps.get_name_version.outputs.projectName }}_${{ steps.get_name_version.outputs.projectVersion }}_linux.7z |    |
          | Mac OS X (archive)      | ${{ steps.get_name_version.outputs.projectName }}_${{ steps.get_name_version.outputs.projectVersion }}_macos.7z |    |

